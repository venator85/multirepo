#!/usr/bin/env python

import xml.etree.ElementTree
import sys
import subprocess
import os

colors = {'none': '\033[0m',
	'black': '\033[0;30m',		'bold_black': '\033[1;30m',
	'red': '\033[0;31m',		'bold_red': '\033[1;31m',
	'green': '\033[0;32m',		'bold_green': '\033[1;32m',
	'yellow': '\033[0;33m',		'bold_yellow': '\033[1;33m',
	'blue': '\033[0;34m',		'bold_blue': '\033[1;34m',
	'magenta': '\033[0;35m',	'bold_magenta': '\033[1;35m',
	'cyan': '\033[0;36m',		'bold_cyan': '\033[1;36m',
	'white': '\033[0;37m',		'bold_white': '\033[1;37m'}

# Run a command synchronously, sending stdout and stderr to shell
def runcmd(cmd, cwd=None, msg=None):
	if msg != None:
		printmsg("%s" % (msg))
	printcmd(cmd)
	shell = type(cmd) != list
	pipe = subprocess.Popen(cmd, shell=shell, cwd=cwd, stdout=None, stderr=None)
	pipe.communicate()	# wait for process to terminate
	retcode = pipe.returncode
	if retcode != 0:
		raise RuntimeError("Command '%s' failed with return code %d" % (cmd, retcode))

def printcmd(msg):
	if type(msg) == list:
		msg = " ".join(msg)
	print "%s-- %s%s" % (colors['yellow'], msg, colors['none'])

def printmsg(msg):
	print "%s>> %s%s" % (colors['bold_blue'], msg, colors['none'])

def printerr(msg):
	print "%s!! %s%s" % (colors['bold_red'], msg, colors['none'])

def printwarn(msg):
	print "%s!! %s%s" % (colors['bold_yellow'], msg, colors['none'])

def main(argv):
	if len(argv) < 2:
		printerr("Usage: multirepo <manifest-file> [git commands]")
		return 1
	
	tree = xml.etree.ElementTree.parse(sys.argv[1])
	root = tree.getroot()
	
	projects = [node for node in root if node.tag == 'project']
	
	if len(argv) == 2:
		for project in projects:
			try:
				url = project.attrib['url']
				path = project.attrib['path']
				branch = project.attrib['branch']
				if os.path.isdir(path):
					message = "Pulling latest changes for '%s'" % (url)
					runcmd("git checkout '%s'" % (branch), cwd=path, msg=message)
					runcmd("git pull", cwd=path)
				else:
					message = "Cloning '%s'" % (url)
					runcmd("git clone -b '%s' '%s' '%s'" % (branch, url, path), msg=message)
			except RuntimeError as e:
				printerr(str(e))
				return 1
	else:
		gitargs = ['git', '--no-pager'] + argv[2:]
		for project in projects:
			path = project.attrib['path']
			if os.path.isdir(path):
				try:
					message = "Executing command for '%s'" % (path)
					runcmd(gitargs, cwd=path, msg=message)
				except RuntimeError as e:
					printerr(str(e))
					return 1
			else:
				printerr("Local copy of repo '%s' not found" % (path))
				return 1

	printmsg("Done!")
	return 0
	
if __name__ == '__main__':
	sys.exit(main(sys.argv))